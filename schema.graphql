input CreateHeroInput {
  name: String!
  date: String!
  clientMutationId: String
}

type CreateHeroPayload {
  hero: Hero
  clientMutationId: String
}

type Hero implements Node {
  id: ID!
  name: String
  date: String
}

type HeroConnection {
  pageInfo: PageInfo!
  edges: [HeroEdge]
}

type HeroEdge {
  node: Hero
  cursor: String!
}

type Mutation {
  createHero(input: CreateHeroInput!): CreateHeroPayload
  removeHero(input: RemoveHeroInput!): RemoveHeroPayload
  updateHero(input: UpdateHeroInput!): UpdateHeroPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(
    id: ID!
  ): Node  
  viewer: Viewer!
}

input RemoveHeroInput {
  id: String!
  clientMutationId: String
}

type RemoveHeroPayload {
  deleted: Boolean
  deletedId: String
  clientMutationId: String
}

input UpdateHeroInput {
  id: String!
  name: String!
  date: String!
  clientMutationId: String
}

type UpdateHeroPayload {
  updated: Boolean
  updatedId: String
  clientMutationId: String
}

type Viewer {
  Hero(id: ID): Hero
  Heroes(after: String, first: Int, before: String, last: Int): HeroConnection!
  id: ID!
}

